openapi: 3.0.2
info:
  version: 1.0.0
  title: Task-Challange
  termsOfService: ''
  contact:
    email: mghossain.42@gmail.com
    url: 'http://localhost'
  license:
    name: Not Licensed
    url: '/'
  x-logo:
    url: 'https://redocly.github.io/openapi-template/logo.png'
  description: >
    This is Web App that utilizes Laravel/PostgreSQL as backend and ReactJs as frontend.

    # Introduction

    Task-challange is a Web App that manages Customers and verify
     their phone numbers using a number valiation API.

    [Laravel](https://laravel.com/) is used to build the RESTful APIs and serves as the back-end.
    This solution contains two seperate laravel apps: CustomerAPI and NumverifyAPI
    <br>CustomerAPI app contains 4 micro-services responsible for Add, Update, Delete and Get all.
    <br>NumverifyAPI app conatins 1 micro-services for verifying the number provided by the customer.


    [PostgreSQL](https://www.postgresql.org/) is used as the database management system.


    [Reactjs](https://reactjs.org/is) is used as the frontend library for demonstrating the API's functionalities.
    <br>The front-end also demonstrates the use of [tailwind.css](https://tailwindcss.com/) a CSS framework.


    All of the solution is packed into a [Docker](https://docs.docker.com/) image.
    <br>Instructions will follow on how to configure and run the container.


    It also demonstrates features of the
    [numverifyAPI](https://apilayer.com/marketplace/number_verification-api) API.

    # Task-challange Specification

    The goal of The Task-Challange is to build, and render
    an interface to managing customers' REST APIs .


    This documentation contains references to all the APIs used, testing
    these APIs as well as the functionalities and behaivior.

tags:
  - name: NumverifyAPI
    description: Example NumverifyAPI operations
  - name: CustomerAPI
    description: Operations about CustomerAPI
  - name: Docker-Depolyment
    description: Instruction on running the docker container
servers:
  - url: ''

paths:
  /{customers}:
    $ref: './paths/users@{username}.yaml'
  /numvalidate:
    $ref: ./paths/echo.yaml
  /docker:
    $ref: ./paths/docker.yaml
components:
  securitySchemes:
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://example.com/api/oauth/dialog'
          scopes:
            'show:customers': show all customers
            'write:user': modify or remove customer
            'add:customer': add a customer
    api_key:
      type: apiKey
      in: header
      name: api_key
    #basic_auth:
      #type: http
      #scheme: basic
